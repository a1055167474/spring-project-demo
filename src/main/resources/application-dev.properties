# 开发环境配置文件

# Druid
# 数据连接池的类型
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 数据连接池的名称
spring.datasource.name=druid_datasource
# 数据库驱动、url、用户名和密码
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://localhost:3306/springdemo?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.druid.username=root
spring.datasource.druid.password=123456
# 配置连接池初始化大小、最大值、最小值
spring.datasource.druid.initial-size=20
spring.datasource.druid.max-active=40
spring.datasource.druid.min-idle=1
# 获取连接等待超时时间
spring.datasource.druid.max-wait=30000
# 间隔多久进行一次检测，检测需要关闭的空闲连接
spring.datasource.druid.time-between-eviction-runs-millis=30000
# 一个连接在池中最小生存的时间
spring.datasource.druid.min-evictable-idle-time-millis=30000
# 检测连接是否有效
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.test-while-idle= true
spring.datasource.druid.test-on-borrow= false
spring.datasource.druid.test-on-return= false

# Mybatis
# mapper映射xml文件的所在路径
mybatis.mapper-locations=classpath*:mapper/*.xml
# 对应实体类的路径
mybatis.type-aliases-package=com.example.SpringProjectDemo.entity
# 开启驼峰命名
mybatis.configuration.map-underscore-to-camel-case=true

# pageHelper
# 指定数据库
pagehelper.helperDialect=mysql
# 是否支持接口参数来传递分页参数
pagehelper.supportMethodsArguments=true


#Redis
# Redis
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis连接端口
spring.redis.port=6379
# Redis连接密码(默认为空)
spring.redis.password=123456
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=20
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
# 连接池中的最大空闲连接、最小空闲连接
spring.redis.jedis.pool.max-idle=10
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=1000

# Swagger
# 是否启用Swagger
swagger.enable=true


# 日志
# 最小能打印出的日志级别，root级别即所有日志
logging.level.root=INFO
# 日志文件保存目录
logging.file.name=logs//spring-project-demo.log
# 启动时是否清除日志
logging.file.clean-history-on-start=false
# 日志的最大尺寸，超过后分割
logging.file.max-size=10MB
# 日志总大小，0为不设限
logging.file.total-size-cap=0
# 限制日志保留天数，到期自动删除
logging.file.max-history=15
# 控制台日志输出格式
logging.pattern.console=%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
# 文件日志输出格式
logging.pattern.file=%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
# appender的log level输出样式
logging.pattern.level=%5p
# 滚动文件名称
logging.pattern.rolling-file-name=${LOG_FILE} + ".%d{yyyy-MM-dd}.%i.gz"
# 时间格式
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss:SSS

